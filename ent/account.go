// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"github/four-servings/meonzi/ent/account"
	"github/four-servings/meonzi/ent/schema"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Account is the model entity for the Account schema.
type Account struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// SocialType holds the value of the "social_type" field.
	SocialType schema.SocialType `json:"social_type,omitempty"`
	// SocialID holds the value of the "social_id" field.
	SocialID string `json:"social_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// LastAccessedAt holds the value of the "last_accessed_at" field.
	LastAccessedAt time.Time `json:"last_accessed_at,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt time.Time `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt time.Time `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt *time.Time `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Account) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case account.FieldSocialType:
			values[i] = &sql.NullInt64{}
		case account.FieldSocialID, account.FieldName:
			values[i] = &sql.NullString{}
		case account.FieldLastAccessedAt, account.FieldCreateAt, account.FieldUpdateAt, account.FieldDeleteAt:
			values[i] = &sql.NullTime{}
		case account.FieldID:
			values[i] = &uuid.UUID{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Account", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Account fields.
func (a *Account) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case account.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case account.FieldSocialType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field social_type", values[i])
			} else if value.Valid {
				a.SocialType = schema.SocialType(value.Int64)
			}
		case account.FieldSocialID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field social_id", values[i])
			} else if value.Valid {
				a.SocialID = value.String
			}
		case account.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case account.FieldLastAccessedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_accessed_at", values[i])
			} else if value.Valid {
				a.LastAccessedAt = value.Time
			}
		case account.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				a.CreateAt = value.Time
			}
		case account.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				a.UpdateAt = value.Time
			}
		case account.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				a.DeleteAt = new(time.Time)
				*a.DeleteAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Account.
// Note that you need to call Account.Unwrap() before calling this method if this Account
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Account) Update() *AccountUpdateOne {
	return (&AccountClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Account entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Account) Unwrap() *Account {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Account is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Account) String() string {
	var builder strings.Builder
	builder.WriteString("Account(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", social_type=")
	builder.WriteString(fmt.Sprintf("%v", a.SocialType))
	builder.WriteString(", social_id=")
	builder.WriteString(a.SocialID)
	builder.WriteString(", name=")
	builder.WriteString(a.Name)
	builder.WriteString(", last_accessed_at=")
	builder.WriteString(a.LastAccessedAt.Format(time.ANSIC))
	builder.WriteString(", create_at=")
	builder.WriteString(a.CreateAt.Format(time.ANSIC))
	builder.WriteString(", update_at=")
	builder.WriteString(a.UpdateAt.Format(time.ANSIC))
	if v := a.DeleteAt; v != nil {
		builder.WriteString(", delete_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Accounts is a parsable slice of Account.
type Accounts []*Account

func (a Accounts) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
