// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github/four-servings/meonzi/ent/account"
	"github/four-servings/meonzi/ent/schema"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AccountCreate is the builder for creating a Account entity.
type AccountCreate struct {
	config
	mutation *AccountMutation
	hooks    []Hook
}

// SetSocialType sets the "social_type" field.
func (ac *AccountCreate) SetSocialType(st schema.SocialType) *AccountCreate {
	ac.mutation.SetSocialType(st)
	return ac
}

// SetSocialID sets the "social_id" field.
func (ac *AccountCreate) SetSocialID(s string) *AccountCreate {
	ac.mutation.SetSocialID(s)
	return ac
}

// SetName sets the "name" field.
func (ac *AccountCreate) SetName(s string) *AccountCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetLastAccessedAt sets the "last_accessed_at" field.
func (ac *AccountCreate) SetLastAccessedAt(t time.Time) *AccountCreate {
	ac.mutation.SetLastAccessedAt(t)
	return ac
}

// SetCreateAt sets the "create_at" field.
func (ac *AccountCreate) SetCreateAt(t time.Time) *AccountCreate {
	ac.mutation.SetCreateAt(t)
	return ac
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ac *AccountCreate) SetNillableCreateAt(t *time.Time) *AccountCreate {
	if t != nil {
		ac.SetCreateAt(*t)
	}
	return ac
}

// SetUpdateAt sets the "update_at" field.
func (ac *AccountCreate) SetUpdateAt(t time.Time) *AccountCreate {
	ac.mutation.SetUpdateAt(t)
	return ac
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ac *AccountCreate) SetNillableUpdateAt(t *time.Time) *AccountCreate {
	if t != nil {
		ac.SetUpdateAt(*t)
	}
	return ac
}

// SetDeleteAt sets the "delete_at" field.
func (ac *AccountCreate) SetDeleteAt(t time.Time) *AccountCreate {
	ac.mutation.SetDeleteAt(t)
	return ac
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (ac *AccountCreate) SetNillableDeleteAt(t *time.Time) *AccountCreate {
	if t != nil {
		ac.SetDeleteAt(*t)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AccountCreate) SetID(u uuid.UUID) *AccountCreate {
	ac.mutation.SetID(u)
	return ac
}

// Mutation returns the AccountMutation object of the builder.
func (ac *AccountCreate) Mutation() *AccountMutation {
	return ac.mutation
}

// Save creates the Account in the database.
func (ac *AccountCreate) Save(ctx context.Context) (*Account, error) {
	var (
		err  error
		node *Account
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AccountCreate) SaveX(ctx context.Context) *Account {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ac *AccountCreate) defaults() {
	if _, ok := ac.mutation.CreateAt(); !ok {
		v := account.DefaultCreateAt()
		ac.mutation.SetCreateAt(v)
	}
	if _, ok := ac.mutation.UpdateAt(); !ok {
		v := account.DefaultUpdateAt()
		ac.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AccountCreate) check() error {
	if _, ok := ac.mutation.SocialType(); !ok {
		return &ValidationError{Name: "social_type", err: errors.New("ent: missing required field \"social_type\"")}
	}
	if _, ok := ac.mutation.SocialID(); !ok {
		return &ValidationError{Name: "social_id", err: errors.New("ent: missing required field \"social_id\"")}
	}
	if v, ok := ac.mutation.SocialID(); ok {
		if err := account.SocialIDValidator(v); err != nil {
			return &ValidationError{Name: "social_id", err: fmt.Errorf("ent: validator failed for field \"social_id\": %w", err)}
		}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := ac.mutation.Name(); ok {
		if err := account.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := ac.mutation.LastAccessedAt(); !ok {
		return &ValidationError{Name: "last_accessed_at", err: errors.New("ent: missing required field \"last_accessed_at\"")}
	}
	if _, ok := ac.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New("ent: missing required field \"create_at\"")}
	}
	if _, ok := ac.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New("ent: missing required field \"update_at\"")}
	}
	return nil
}

func (ac *AccountCreate) sqlSave(ctx context.Context) (*Account, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (ac *AccountCreate) createSpec() (*Account, *sqlgraph.CreateSpec) {
	var (
		_node = &Account{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: account.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: account.FieldID,
			},
		}
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.SocialType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: account.FieldSocialType,
		})
		_node.SocialType = value
	}
	if value, ok := ac.mutation.SocialID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldSocialID,
		})
		_node.SocialID = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ac.mutation.LastAccessedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldLastAccessedAt,
		})
		_node.LastAccessedAt = value
	}
	if value, ok := ac.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := ac.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := ac.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldDeleteAt,
		})
		_node.DeleteAt = &value
	}
	return _node, _spec
}

// AccountCreateBulk is the builder for creating many Account entities in bulk.
type AccountCreateBulk struct {
	config
	builders []*AccountCreate
}

// Save creates the Account entities in the database.
func (acb *AccountCreateBulk) Save(ctx context.Context) ([]*Account, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Account, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AccountCreateBulk) SaveX(ctx context.Context) []*Account {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
